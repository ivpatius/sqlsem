CREATE DATABASE Aminov;
use Aminov;
/* part 1*/
CREATE TABLE students (
    ID INT PRIMARY KEY,
    FIO VARCHAR(100) NOT NULL,
    group_ID INT NOT NULL,
    faculty_ID INT NOT NULL,
    departament_ID INT NOT NULL,
    advisor_ID INT NOT NULL
);

INSERT INTO students VALUES(3, 'Азманов Алексей Михайлович', 1, 1, 1, 1)
INSERT INTO students VALUES(2, 'Бибов Алексей Михайлович', 1, 1, 1, 1)
INSERT INTO students VALUES(4, 'Зелимхан Алексей Михайлович', 1, 1, 1, 1)
/* part 2 */
SELECT * FROM students

CREATE TABLE groups (
    groupID INT PRIMARY KEY,
    groupName VARCHAR(99) NOT NULL
);
INSERT INTO Groups VALUES(1, 'ПМ1')
SELECT * FROM Groups

CREATE TABLE advisors (
    advisorID INT PRIMARY KEY,
    advisorName VARCHAR(99) NOT NULL
);
INSERT INTO advisors VALUES(1, 'Балабанов Виктор Леонид')
SELECT * FROM advisors

CREATE TABLE faculties(
  facultyID INT PRIMARY KEY,
  facultyName VARCHAR(99) NOT NULL
);

INSERT INTO faculties VALUES(1, 'Пркиладная математика')

CREATE TABLE departments(
  departmentID INT PRIMARY KEY,
  departmentName VARCHAR(99) NOT NULL
);

INSERT INTO faculties VALUES(1, 'Мат-мех')

ALTER TABLE students 
ADD CONSTRAINT stud_groups
    FOREIGN KEY (group_ID) REFERENCES groups(GroupID);

ALTER TABLE students
ADD CONSTRAINT stud_adv
    FOREIGN KEY (advisor_ID) REFERENCES advisors(AdvisorID);

ALTER TABLE students
ADD CONSTRAINT stud_adv
    FOREIGN KEY (faculty_ID) REFERENCES faculties(facultyID);

ALTER TABLE students
ADD CONSTRAINT stud_adv
    FOREIGN KEY (departament_ID) REFERENCES advisors(departmentID);

GO

/* CREATE VIEW stud_view WITH SchemaBinding           
AS
  SELECT ID, FIO, group_ID, faculty_ID, departament_ID, advisor_ID
  FROM students;
*/

CREATE VIEW stud_view 
AS
  SELECT *
  FROM students;
GO

CREATE USER user_stud WITHOUT LOGIN;
GRANT SELECT ON stud_view TO user_stud;

GO


/* part 3 */
CREATE ROLE stud_del;
GRANT DELETE ON students TO stud_del;

GO

create PROCEDURE id_stud_del
    @stud_ID int
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;
        DELETE FROM students WHERE  ID = @stud_ID;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
    ROLLBACK TRANSACTION;
    END CATCH;
END;

EXEC id_stud_del @stud_ID = 4;
/* 2 вариант */
GO
CREATE PROCEDURE fio_stud_del 
    @delstudFIO VARCHAR(100)
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;
        DELETE FROM students WHERE FIO = @delstudFIO;
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
    END CATCH;
END;

CREATE TABLE Logs (
    delstudID INT,
  delstudFIO varchar(100)
);


GO
CREATE TRIGGER afterdeletesomestudents
ON Students
AFTER DELETE
AS
BEGIN
    INSERT INTO logs(delstudID, delstudFIO)
  SELECT deleted.ID, deleted.FIO
  FROM deleted;
  PRINT 'Данные записаны в таблицу Logs'
   
END;

GO


GRANT DELETE ON logs TO stud_del WITH CASCADE; /* !!! */
GRANT UPDATE ON logs TO stud_del;

/* part 3 mail */

GO


CREATE TRIGGER sendemailtostudent
ON students  
AFTER INSERT
AS
BEGIN
    DECLARE @studentFIO NVARCHAR(100);
    
    -- Получение информации о новом студенте
    SELECT @studentFIO = inserted.FIO
    FROM inserted;

    -- Отправка письма на указанный адрес
    EXEC msdb.dbo.sp_send_dbmail
        @profile_name = 'TestProfile',  -- Имя профиля Database Mail
        @recipients = 'arkadiy.aminov@mail.com',  -- Email получателя
        @subject = 'Новый студент!',  -- Тема письма
        @body = @studentFIO   -- Тело письма
    PRINT 'Информация о студенте отправлена на почтовый адрес'
END;

DROP TRIGGER sendemailtostudent


EXEC msdb.dbo.sp_send_dbmail
        @profile_name = 'TestProfile',  -- Имя профиля Database Mail
        @recipients = 'arkadiy.aminov@mail.com',  -- Email получателя
        @subject = 'Новый студент!',  -- Тема письма
        @body = 'Nuke is now legal'  -- Тело письма
    PRINT 'Информация о студенте отправлена на почтовый адрес'


/* part 4 */
DROP INDEX idx_student_ID ON students;
DROP INDEX idx_full_name ON students;
CREATE INDEX idx_student_ID ON Students(ID);
CREATE INDEX idx_full_name ON Students(FIO);




SELECT er.log_id AS [LogID], 
    er.event_type AS [EventType], 
    er.log_date AS [LogDate], 
    er.description AS [Description], 
    er.process_id AS [ProcessID], 
    er.mailitem_id AS [MailItemID], 
    er.account_id AS [AccountID], 
    er.last_mod_date AS [LastModifiedDate], 
    er.last_mod_user AS [LastModifiedUser],
    fi.send_request_user,
    fi.send_request_date,
    fi.recipients, fi.subject, fi.body
FROM msdb.dbo.sysmail_event_log er 
    LEFT JOIN msdb.dbo.sysmail_faileditems fi
ON er.mailitem_id = fi.mailitem_id
ORDER BY [LogDate] DESC
